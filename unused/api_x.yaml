---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an API gateway that's backed by a Lambda function
Parameters:
  APIName:
    Description: Name of the API to create
    Type: String
    Default: "api"
  APIDescription:
    Description: Description of the API to create
    Type: String
    Default: No description provided. Provide 'APIDescription' param to override this.
  APIPath:
    Description: URL path for the API
    Type: String
    Default: api
  APIStageName:
    Description: Stage name to deploy the API to
    Type: String
    Default: dev
  LambdaCodeBucket:
    Description: Name of the S3 bucket that's storing the Lamba function's zip file
    Type: String
  LambdaCodePath:
    Description: Path to the zip file of code for the Lambda function
    Type: String
  APIGatewayCustomResourceARN:
    Description: 'The ARN pointing to the Lambda function that creates custom API
      gateway resources (install from https://apigatewaycloudformation.bynordenfelt.com/).
      Example: arn:aws:lambda:us-east-1:123456789012:function:APIGatewayCustomResource-LambdaFunction-ABCDEFG123'
    Type: String
Resources:
  BackingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaCodeBucket
        S3Key:
          Ref: LambdaCodePath
      FunctionName:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - Ref: APIName
      Handler: index.handler
      MemorySize: '128'
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs4.3
      Timeout: '3'
  BackingLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - BackingLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  BackingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - UseDBPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
  MainAPI:
    Type: Custom::RestApi
    Properties:
      name:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - Ref: APIName
      description:
        Ref: APIDescription
      ServiceToken:
        Ref: APIGatewayCustomResourceARN
  MainAPIResource:
    Type: Custom::ApiResource
    Properties:
      ServiceToken:
        Ref: APIGatewayCustomResourceARN
      restApiId:
        Ref: MainAPI
      parentId:
        Fn::GetAtt:
        - MainAPI
        - parentResourceId
      pathPart:
        Ref: APIPath
      corsConfiguration:
        allowMethods:
        - GET
        - POST
        allowHeaders:
        - x-my-header
        - some-other-header
        allowDefaultHeaders: true
        allowOrigin: "*"
        exposeHeaders:
        - some-header
        - x-another-header
        maxAge: 1800
  APIMethodPost:
    Type: Custom::ApiMethod
    Properties:
      ServiceToken:
        Ref: APIGatewayCustomResourceARN
      restApiId:
        Ref: MainAPI
      resourceId:
        Ref: MainAPIResource
      method:
        httpMethod: POST
        parameters:
        - querystring.sortBy
        - header.x-test-header
        - path.entityType
      integration:
        type: AWS
        uri:
          Fn::Join:
          - ":"
          - - arn:aws:apigateway
            - Ref: AWS::Region
            - lambda:path/2015-03-31/functions/arn:aws:lambda
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - function
            - Fn::Join:
              - "/"
              - - Fn::Join:
                  - "-"
                  - - Ref: AWS::StackName
                    - Ref: APIName
                - invocations
        httpMethod: POST
        requestTemplates:
          application/json:
          - input-pass-through-full
        requestParameters:
          integration.request.querystring.sortBy: "'hardcodedValue'"
      responses:
        default:
          statusCode: '200'
          headers:
            X-Custom-Header: "'hardcodedValue'"
        ".*NotFound.*":
          statusCode: '404'
  DeployApi:
    Type: Custom::ApiDeploy
    DependsOn:
    - APIMethodGet
    - APIMethodPost
    Properties:
      ServiceToken:
        Ref: APIGatewayCustomResourceARN
      restApiId:
        Ref: MainAPI
      stageName:
        Ref: APIStageName
      stageConfig:
        cacheClusterEnabled: false
      methodSettings: {}
      stageVariables:
        testVar1: testValue1
        testVar2: testValue2
Outputs:
  LambdaName:
    Value:
      Ref: BackingLambdaFunction
    Description: The Lambda function
  MainAPI:
    Value:
      Ref: MainAPI
    Description: The main API gateway
  APIDeployment:
    Value:
      Ref: DeployApi
    Description: The deployment of the API
